Attack A:
1. 
Zoobar is susceptible to a cross-site-scripting attack, i.e., arbitrary code can be 
passed and run into the HTML via user input (in this case the URL). Since the user 
field does not screen user input and just plops it right into the HTML file, it can 
easily be abused to end the user entry field early and continue passing in arbitrary
code.

2. 
This attack works by passing in Javascript code through the user field. In the 
source code, this is treated as regular HTML code, through which we can run a 
javascript program to send an email containing the user's login cookie.

After the email is sent, the user is redirected back to the user page as if nothing happened.
Source for redirection code: https://www.w3docs.com/snippets/html/how-to-redirect-a-web-page-in-html.html

3. 
We can mitigate this vulnerability by screening user inputs to the user field to 
exclude special characters (and thereby also exclude special characters in all 
usernames during account registration). OR implementing a content security policy 
specifying explicitly where Javascript is and is not allowed to run.


Attack B:
1. 
Cross-Site Foragery - Zoobar's security is non-existent, so we are essentially able
to do whatever we could possibly want on the site inside someone's account...from a 
different site altogether.

2. 
Basically, we have some HTML code that, when run by the target, uses a hidden,
pre-filled-out form to transfer 10 Zoobars from the target's account to "attacker".
This form is aimed (action) at the transfer php page on the Zoobar site, so it provides a 
recipient (attacker) and number of Zoobars (10). We used an iframe so that when
the form is sent, it does not open up the transfer.php page in a separate tab, but 
rather, invisibly, on the same page. Once the page is loaded up (i.e. the transfer
went through), the page is redirected to Bing, leaving the target none-the-wiser.

3. 
I like the idea of a secret validation token (from lecture) in this case because
the attack relies on there being no surprises. At a minimum, adding a layer of 
validation would would make the attack far more difficult--and, if we were to employ 
some of the ideas we learned in class about hashing (hashing a session token) and 
making the hashing process slow, then it may become prohibitively expensive to crack. 


Attack C: 
1.
SQL Injection - when Zoobar searches its database for a username/hashed password
match, it uses verbatim user input for the username, which opens the door to using
some SQL code in the username.

2. 
On the surface, our HTML code just has an input box, into which you should put an
existing username, and a submit buttom (BREAK IN!). Under the hood, the HTML uses 
the username and concatenates an apostrophe (') and a SQL single-line comment (--).
This combination effectively cancels out the rest of the criteria in the database 
search, so that its just looking for the username. So, the account that is ultimately 
logged into is the one associated with the username. However, each time this is run,
it actually creates a new account with a username of <username>'--. This can only 
be done once because once <username>'-- exists, it cannot be used again as essentially
the surrogate. So, we make a new username every time. To ensure each new username
is unique, I also concatenate the current date (Javascript) -- so, <username>'--<Date.now()>.
This basically guarentees, as long as attacks aren't made more than 1 per nanosecond, 
that it is safe to use (until 2038 presumably anyway).

3. 
The biggest way to mitigate this attack is simply to be smarter with SQL -- as explained
in lecture, do not build the commands right from the user input! Instead, but the user
input through a preparation stage where the input is escaped as necessary, so that 
when it does reach execution, the user input is never anything more than a string.
